{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\nclass ApiService {\n  constructor() {\n    this.client = axios.create({\n      baseURL: API_BASE_URL,\n      timeout: 30000,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n  }\n\n  /**\n   * Start archiving a website\n   * @param {string} url - URL to archive\n   * @returns {Promise<Object>} Job information\n   */\n  async startArchiving(url) {\n    try {\n      const response = await this.client.post('/archive', {\n        url\n      });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\n   * Get job status\n   * @param {string} jobId - Job ID\n   * @returns {Promise<Object>} Job status\n   */\n  async getJobStatus(jobId) {\n    try {\n      const response = await this.client.get(`/status/${jobId}`);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\n   * Get archives for a domain\n   * @param {string} domain - Domain name\n   * @returns {Promise<Object>} Archives data\n   */\n  async getArchivesByDomain(domain) {\n    try {\n      const response = await this.client.get(`/archives/${domain}`);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\n   * Get all archives\n   * @returns {Promise<Object>} All archives\n   */\n  async getAllArchives() {\n    try {\n      const response = await this.client.get('/archives');\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\n   * Get archive information\n   * @param {string} archiveId - Archive ID\n   * @returns {Promise<Object>} Archive details\n   */\n  async getArchiveInfo(archiveId) {\n    try {\n      const response = await this.client.get(`/archive/${archiveId}/info`);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\n   * Get URL for viewing archived content\n   * @param {string} archiveId - Archive ID\n   * @param {string} path - Path within archive (optional)\n   * @returns {string} URL for archived content\n   */\n  getArchiveViewUrl(archiveId, path = '') {\n    return `${API_BASE_URL}/view/${archiveId}/${path}`;\n  }\n\n  /**\n   * Delete an archive\n   * @param {string} archiveId - Archive ID\n   * @returns {Promise<Object>} Deletion result\n   */\n  async deleteArchive(archiveId) {\n    try {\n      const response = await this.client.delete(`/archive/${archiveId}`);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\n   * Extract domain from URL\n   * @param {string} url - Full URL\n   * @returns {string} Domain name\n   */\n  extractDomain(url) {\n    try {\n      const urlObj = new URL(url);\n      return urlObj.hostname;\n    } catch (error) {\n      throw new Error('Invalid URL format');\n    }\n  }\n\n  /**\n   * Validate URL format\n   * @param {string} url - URL to validate\n   * @returns {boolean} Whether URL is valid\n   */\n  isValidUrl(url) {\n    try {\n      new URL(url);\n      return true;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  /**\n   * Handle API errors\n   * @param {Error} error - Axios error\n   * @returns {Error} Formatted error\n   */\n  handleError(error) {\n    if (error.response) {\n      var _error$response$data, _error$response$data2;\n      // Server responded with error status\n      const message = ((_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || ((_error$response$data2 = error.response.data) === null || _error$response$data2 === void 0 ? void 0 : _error$response$data2.message) || 'Server error';\n      return new Error(message);\n    } else if (error.request) {\n      // Request was made but no response received\n      return new Error('Network error - please check your connection');\n    } else {\n      // Something else happened\n      return new Error(error.message || 'Unknown error occurred');\n    }\n  }\n\n  /**\n   * Format timestamp for display\n   * @param {string} timestamp - ISO timestamp\n   * @returns {string} Formatted date/time\n   */\n  formatTimestamp(timestamp) {\n    try {\n      const date = new Date(timestamp);\n      return date.toLocaleString();\n    } catch (error) {\n      return 'Invalid date';\n    }\n  }\n\n  /**\n   * Get relative time (e.g., \"2 hours ago\")\n   * @param {string} timestamp - ISO timestamp\n   * @returns {string} Relative time string\n   */\n  getRelativeTime(timestamp) {\n    try {\n      const date = new Date(timestamp);\n      const now = new Date();\n      const diffMs = now - date;\n      const diffMins = Math.floor(diffMs / 60000);\n      const diffHours = Math.floor(diffMins / 60);\n      const diffDays = Math.floor(diffHours / 24);\n      if (diffMins < 1) return 'Just now';\n      if (diffMins < 60) return `${diffMins} minute${diffMins !== 1 ? 's' : ''} ago`;\n      if (diffHours < 24) return `${diffHours} hour${diffHours !== 1 ? 's' : ''} ago`;\n      if (diffDays < 7) return `${diffDays} day${diffDays !== 1 ? 's' : ''} ago`;\n      return date.toLocaleDateString();\n    } catch (error) {\n      return 'Unknown time';\n    }\n  }\n}\nexport default new ApiService();","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","ApiService","constructor","client","create","baseURL","timeout","headers","startArchiving","url","response","post","data","error","handleError","getJobStatus","jobId","get","getArchivesByDomain","domain","getAllArchives","getArchiveInfo","archiveId","getArchiveViewUrl","path","deleteArchive","delete","extractDomain","urlObj","URL","hostname","Error","isValidUrl","_error$response$data","_error$response$data2","message","request","formatTimestamp","timestamp","date","Date","toLocaleString","getRelativeTime","now","diffMs","diffMins","Math","floor","diffHours","diffDays","toLocaleDateString"],"sources":["/Users/Shevonne/Development/interview_prep/web-archiver/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\n\nclass ApiService {\n  constructor() {\n    this.client = axios.create({\n      baseURL: API_BASE_URL,\n      timeout: 30000,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n  }\n\n  /**\n   * Start archiving a website\n   * @param {string} url - URL to archive\n   * @returns {Promise<Object>} Job information\n   */\n  async startArchiving(url) {\n    try {\n      const response = await this.client.post('/archive', { url });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\n   * Get job status\n   * @param {string} jobId - Job ID\n   * @returns {Promise<Object>} Job status\n   */\n  async getJobStatus(jobId) {\n    try {\n      const response = await this.client.get(`/status/${jobId}`);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\n   * Get archives for a domain\n   * @param {string} domain - Domain name\n   * @returns {Promise<Object>} Archives data\n   */\n  async getArchivesByDomain(domain) {\n    try {\n      const response = await this.client.get(`/archives/${domain}`);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\n   * Get all archives\n   * @returns {Promise<Object>} All archives\n   */\n  async getAllArchives() {\n    try {\n      const response = await this.client.get('/archives');\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\n   * Get archive information\n   * @param {string} archiveId - Archive ID\n   * @returns {Promise<Object>} Archive details\n   */\n  async getArchiveInfo(archiveId) {\n    try {\n      const response = await this.client.get(`/archive/${archiveId}/info`);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\n   * Get URL for viewing archived content\n   * @param {string} archiveId - Archive ID\n   * @param {string} path - Path within archive (optional)\n   * @returns {string} URL for archived content\n   */\n  getArchiveViewUrl(archiveId, path = '') {\n    return `${API_BASE_URL}/view/${archiveId}/${path}`;\n  }\n\n  /**\n   * Delete an archive\n   * @param {string} archiveId - Archive ID\n   * @returns {Promise<Object>} Deletion result\n   */\n  async deleteArchive(archiveId) {\n    try {\n      const response = await this.client.delete(`/archive/${archiveId}`);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\n   * Extract domain from URL\n   * @param {string} url - Full URL\n   * @returns {string} Domain name\n   */\n  extractDomain(url) {\n    try {\n      const urlObj = new URL(url);\n      return urlObj.hostname;\n    } catch (error) {\n      throw new Error('Invalid URL format');\n    }\n  }\n\n  /**\n   * Validate URL format\n   * @param {string} url - URL to validate\n   * @returns {boolean} Whether URL is valid\n   */\n  isValidUrl(url) {\n    try {\n      new URL(url);\n      return true;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  /**\n   * Handle API errors\n   * @param {Error} error - Axios error\n   * @returns {Error} Formatted error\n   */\n  handleError(error) {\n    if (error.response) {\n      // Server responded with error status\n      const message = error.response.data?.error || error.response.data?.message || 'Server error';\n      return new Error(message);\n    } else if (error.request) {\n      // Request was made but no response received\n      return new Error('Network error - please check your connection');\n    } else {\n      // Something else happened\n      return new Error(error.message || 'Unknown error occurred');\n    }\n  }\n\n  /**\n   * Format timestamp for display\n   * @param {string} timestamp - ISO timestamp\n   * @returns {string} Formatted date/time\n   */\n  formatTimestamp(timestamp) {\n    try {\n      const date = new Date(timestamp);\n      return date.toLocaleString();\n    } catch (error) {\n      return 'Invalid date';\n    }\n  }\n\n  /**\n   * Get relative time (e.g., \"2 hours ago\")\n   * @param {string} timestamp - ISO timestamp\n   * @returns {string} Relative time string\n   */\n  getRelativeTime(timestamp) {\n    try {\n      const date = new Date(timestamp);\n      const now = new Date();\n      const diffMs = now - date;\n      const diffMins = Math.floor(diffMs / 60000);\n      const diffHours = Math.floor(diffMins / 60);\n      const diffDays = Math.floor(diffHours / 24);\n\n      if (diffMins < 1) return 'Just now';\n      if (diffMins < 60) return `${diffMins} minute${diffMins !== 1 ? 's' : ''} ago`;\n      if (diffHours < 24) return `${diffHours} hour${diffHours !== 1 ? 's' : ''} ago`;\n      if (diffDays < 7) return `${diffDays} day${diffDays !== 1 ? 's' : ''} ago`;\n      \n      return date.toLocaleDateString();\n    } catch (error) {\n      return 'Unknown time';\n    }\n  }\n}\n\nexport default new ApiService();\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;AAEjF,MAAMC,UAAU,CAAC;EACfC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,MAAM,GAAGP,KAAK,CAACQ,MAAM,CAAC;MACzBC,OAAO,EAAER,YAAY;MACrBS,OAAO,EAAE,KAAK;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;AACA;AACA;EACE,MAAMC,cAAcA,CAACC,GAAG,EAAE;IACxB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAM,IAAI,CAACP,MAAM,CAACQ,IAAI,CAAC,UAAU,EAAE;QAAEF;MAAI,CAAC,CAAC;MAC5D,OAAOC,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,MAAM,IAAI,CAACC,WAAW,CAACD,KAAK,CAAC;IAC/B;EACF;;EAEA;AACF;AACA;AACA;AACA;EACE,MAAME,YAAYA,CAACC,KAAK,EAAE;IACxB,IAAI;MACF,MAAMN,QAAQ,GAAG,MAAM,IAAI,CAACP,MAAM,CAACc,GAAG,CAAC,WAAWD,KAAK,EAAE,CAAC;MAC1D,OAAON,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,MAAM,IAAI,CAACC,WAAW,CAACD,KAAK,CAAC;IAC/B;EACF;;EAEA;AACF;AACA;AACA;AACA;EACE,MAAMK,mBAAmBA,CAACC,MAAM,EAAE;IAChC,IAAI;MACF,MAAMT,QAAQ,GAAG,MAAM,IAAI,CAACP,MAAM,CAACc,GAAG,CAAC,aAAaE,MAAM,EAAE,CAAC;MAC7D,OAAOT,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,MAAM,IAAI,CAACC,WAAW,CAACD,KAAK,CAAC;IAC/B;EACF;;EAEA;AACF;AACA;AACA;EACE,MAAMO,cAAcA,CAAA,EAAG;IACrB,IAAI;MACF,MAAMV,QAAQ,GAAG,MAAM,IAAI,CAACP,MAAM,CAACc,GAAG,CAAC,WAAW,CAAC;MACnD,OAAOP,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,MAAM,IAAI,CAACC,WAAW,CAACD,KAAK,CAAC;IAC/B;EACF;;EAEA;AACF;AACA;AACA;AACA;EACE,MAAMQ,cAAcA,CAACC,SAAS,EAAE;IAC9B,IAAI;MACF,MAAMZ,QAAQ,GAAG,MAAM,IAAI,CAACP,MAAM,CAACc,GAAG,CAAC,YAAYK,SAAS,OAAO,CAAC;MACpE,OAAOZ,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,MAAM,IAAI,CAACC,WAAW,CAACD,KAAK,CAAC;IAC/B;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEU,iBAAiBA,CAACD,SAAS,EAAEE,IAAI,GAAG,EAAE,EAAE;IACtC,OAAO,GAAG3B,YAAY,SAASyB,SAAS,IAAIE,IAAI,EAAE;EACpD;;EAEA;AACF;AACA;AACA;AACA;EACE,MAAMC,aAAaA,CAACH,SAAS,EAAE;IAC7B,IAAI;MACF,MAAMZ,QAAQ,GAAG,MAAM,IAAI,CAACP,MAAM,CAACuB,MAAM,CAAC,YAAYJ,SAAS,EAAE,CAAC;MAClE,OAAOZ,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,MAAM,IAAI,CAACC,WAAW,CAACD,KAAK,CAAC;IAC/B;EACF;;EAEA;AACF;AACA;AACA;AACA;EACEc,aAAaA,CAAClB,GAAG,EAAE;IACjB,IAAI;MACF,MAAMmB,MAAM,GAAG,IAAIC,GAAG,CAACpB,GAAG,CAAC;MAC3B,OAAOmB,MAAM,CAACE,QAAQ;IACxB,CAAC,CAAC,OAAOjB,KAAK,EAAE;MACd,MAAM,IAAIkB,KAAK,CAAC,oBAAoB,CAAC;IACvC;EACF;;EAEA;AACF;AACA;AACA;AACA;EACEC,UAAUA,CAACvB,GAAG,EAAE;IACd,IAAI;MACF,IAAIoB,GAAG,CAACpB,GAAG,CAAC;MACZ,OAAO,IAAI;IACb,CAAC,CAAC,OAAOI,KAAK,EAAE;MACd,OAAO,KAAK;IACd;EACF;;EAEA;AACF;AACA;AACA;AACA;EACEC,WAAWA,CAACD,KAAK,EAAE;IACjB,IAAIA,KAAK,CAACH,QAAQ,EAAE;MAAA,IAAAuB,oBAAA,EAAAC,qBAAA;MAClB;MACA,MAAMC,OAAO,GAAG,EAAAF,oBAAA,GAAApB,KAAK,CAACH,QAAQ,CAACE,IAAI,cAAAqB,oBAAA,uBAAnBA,oBAAA,CAAqBpB,KAAK,OAAAqB,qBAAA,GAAIrB,KAAK,CAACH,QAAQ,CAACE,IAAI,cAAAsB,qBAAA,uBAAnBA,qBAAA,CAAqBC,OAAO,KAAI,cAAc;MAC5F,OAAO,IAAIJ,KAAK,CAACI,OAAO,CAAC;IAC3B,CAAC,MAAM,IAAItB,KAAK,CAACuB,OAAO,EAAE;MACxB;MACA,OAAO,IAAIL,KAAK,CAAC,8CAA8C,CAAC;IAClE,CAAC,MAAM;MACL;MACA,OAAO,IAAIA,KAAK,CAAClB,KAAK,CAACsB,OAAO,IAAI,wBAAwB,CAAC;IAC7D;EACF;;EAEA;AACF;AACA;AACA;AACA;EACEE,eAAeA,CAACC,SAAS,EAAE;IACzB,IAAI;MACF,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACF,SAAS,CAAC;MAChC,OAAOC,IAAI,CAACE,cAAc,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAO5B,KAAK,EAAE;MACd,OAAO,cAAc;IACvB;EACF;;EAEA;AACF;AACA;AACA;AACA;EACE6B,eAAeA,CAACJ,SAAS,EAAE;IACzB,IAAI;MACF,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACF,SAAS,CAAC;MAChC,MAAMK,GAAG,GAAG,IAAIH,IAAI,CAAC,CAAC;MACtB,MAAMI,MAAM,GAAGD,GAAG,GAAGJ,IAAI;MACzB,MAAMM,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACH,MAAM,GAAG,KAAK,CAAC;MAC3C,MAAMI,SAAS,GAAGF,IAAI,CAACC,KAAK,CAACF,QAAQ,GAAG,EAAE,CAAC;MAC3C,MAAMI,QAAQ,GAAGH,IAAI,CAACC,KAAK,CAACC,SAAS,GAAG,EAAE,CAAC;MAE3C,IAAIH,QAAQ,GAAG,CAAC,EAAE,OAAO,UAAU;MACnC,IAAIA,QAAQ,GAAG,EAAE,EAAE,OAAO,GAAGA,QAAQ,UAAUA,QAAQ,KAAK,CAAC,GAAG,GAAG,GAAG,EAAE,MAAM;MAC9E,IAAIG,SAAS,GAAG,EAAE,EAAE,OAAO,GAAGA,SAAS,QAAQA,SAAS,KAAK,CAAC,GAAG,GAAG,GAAG,EAAE,MAAM;MAC/E,IAAIC,QAAQ,GAAG,CAAC,EAAE,OAAO,GAAGA,QAAQ,OAAOA,QAAQ,KAAK,CAAC,GAAG,GAAG,GAAG,EAAE,MAAM;MAE1E,OAAOV,IAAI,CAACW,kBAAkB,CAAC,CAAC;IAClC,CAAC,CAAC,OAAOrC,KAAK,EAAE;MACd,OAAO,cAAc;IACvB;EACF;AACF;AAEA,eAAe,IAAIZ,UAAU,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}